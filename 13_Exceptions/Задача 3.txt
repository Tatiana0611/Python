Тест 1

import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class InvalidNameError(Exception):
    pass

class InvalidAgeError(Exception):
    pass

class InvalidIdError(Exception):
    pass

class Person:
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int):
        self._validate_name(last_name, "Фамилия")
        self._validate_name(first_name, "Имя")
        self._validate_name(patronymic, "Отчество")
        self._validate_age(age)
        self.last_name = last_name
        self.first_name = first_name
        self.patronymic = patronymic
        self.age = age

    def _validate_name(self, name: str, field_name: str):
        if not isinstance(name, str) or name.strip() == "":
            raise InvalidNameError(f"{field_name} должно быть непустой строкой.")

    def _validate_age(self, age: int):
        if not isinstance(age, int) or age <= 0:
            raise InvalidAgeError("Возраст должен быть положительным целым числом.")

    def birthday(self):
        self.age += 1

class Employee(Person):
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int, employee_id: int):
        super().__init__(last_name, first_name, patronymic, age)
        self._validate_id(employee_id)
        self.employee_id = employee_id

    def _validate_id(self, employee_id: int):
        if not isinstance(employee_id, int) or employee_id <= 0 or employee_id > 999999:
            raise InvalidIdError("ID должен быть шестизначным положительным целым числом.")

    def get_level(self):
        return sum(int(digit) for digit in str(self.employee_id)) % 7



#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

# person = Person("", "John", "Doe", 30)
# print(person) 


person = Person("", "John", "Doe", 30)




print()

Ожидаемый ответ:

__main__.InvalidNameError: Invalid name: . Name should be a non-empty string.

Ваш ответ:

__main__.InvalidNameError: Фамилия должно быть непустой строкой.







import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class InvalidNameError(Exception):
    pass

class InvalidAgeError(Exception):
    pass

class InvalidIdError(Exception):
    pass

class Person:
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int):
        self._validate_name(last_name, "Фамилия")
        self._validate_name(first_name, "Имя")
        self._validate_name(patronymic, "Отчество")
        self._validate_age(age)
        self.last_name = last_name
        self.first_name = first_name
        self.patronymic = patronymic
        self.age = age

    def _validate_name(self, name: str, field_name: str):
        if not isinstance(name, str) or name.strip() == "":
            raise InvalidNameError(f"{field_name} должно быть непустой строкой.")

    def _validate_age(self, age: int):
        if not isinstance(age, int) or age <= 0:
            raise InvalidAgeError("Возраст должен быть положительным целым числом.")

    def birthday(self):
        self.age += 1

class Employee(Person):
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int, employee_id: int):
        super().__init__(last_name, first_name, patronymic, age)
        self._validate_id(employee_id)
        self.employee_id = employee_id

    def _validate_id(self, employee_id: int):
        if not isinstance(employee_id, int) or employee_id <= 0 or employee_id > 999999:
            raise InvalidIdError("ID должен быть шестизначным положительным целым числом.")

    def get_level(self):
        return sum(int(digit) for digit in str(self.employee_id)) % 7



#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

# person = Person("", "John", "Doe", 30)
# print(person) 


person = Person("Alice", "Smith", "Johnson", -5)




print()

Ожидаемый ответ:

__main__.InvalidAgeError: Invalid age: -5. Age should be a positive integer.

Ваш ответ:

__main__.InvalidAgeError: Возраст должен быть положительным целым числом.





import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class InvalidNameError(Exception):
    pass

class InvalidAgeError(Exception):
    pass

class InvalidIdError(Exception):
    pass

class Person:
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int):
        self._validate_name(last_name, "Фамилия")
        self._validate_name(first_name, "Имя")
        self._validate_name(patronymic, "Отчество")
        self._validate_age(age)
        self.last_name = last_name
        self.first_name = first_name
        self.patronymic = patronymic
        self.age = age

    def _validate_name(self, name: str, field_name: str):
        if not isinstance(name, str) or name.strip() == "":
            raise InvalidNameError(f"{field_name} должно быть непустой строкой.")

    def _validate_age(self, age: int):
        if not isinstance(age, int) or age <= 0:
            raise InvalidAgeError("Возраст должен быть положительным целым числом.")

    def birthday(self):
        self.age += 1

class Employee(Person):
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int, employee_id: int):
        super().__init__(last_name, first_name, patronymic, age)
        self._validate_id(employee_id)
        self.employee_id = employee_id

    def _validate_id(self, employee_id: int):
        if not isinstance(employee_id, int) or employee_id <= 0 or employee_id > 999999:
            raise InvalidIdError("ID должен быть шестизначным положительным целым числом.")

    def get_level(self):
        return sum(int(digit) for digit in str(self.employee_id)) % 7



#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

# person = Person("", "John", "Doe", 30)
# print(person) 


employee = Employee("Bob", "Johnson", "Brown", 40, 12345)




print()









import warnings

warnings.filterwarnings('ignore')

# Введите ваше решение ниже

class InvalidNameError(Exception):
    pass

class InvalidAgeError(Exception):
    pass

class InvalidIdError(Exception):
    pass

class Person:
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int):
        self._validate_name(last_name, "Фамилия")
        self._validate_name(first_name, "Имя")
        self._validate_name(patronymic, "Отчество")
        self._validate_age(age)
        self.last_name = last_name
        self.first_name = first_name
        self.patronymic = patronymic
        self.age = age

    def _validate_name(self, name: str, field_name: str):
        if not isinstance(name, str) or name.strip() == "":
            raise InvalidNameError(f"{field_name} должно быть непустой строкой.")

    def _validate_age(self, age: int):
        if not isinstance(age, int) or age <= 0:
            raise InvalidAgeError("Возраст должен быть положительным целым числом.")

    def birthday(self):
        self.age += 1

class Employee(Person):
    def __init__(self, last_name: str, first_name: str, patronymic: str, age: int, employee_id: int):
        super().__init__(last_name, first_name, patronymic, age)
        self._validate_id(employee_id)
        self.employee_id = employee_id

    def _validate_id(self, employee_id: int):
        if not isinstance(employee_id, int) or employee_id <= 0 or employee_id > 999999:
            raise InvalidIdError("ID должен быть шестизначным положительным целым числом.")

    def get_level(self):
        return sum(int(digit) for digit in str(self.employee_id)) % 7



#При отправке кода на Выполнение раскомментируйте строку ниже, чтобы задать значения аргументов и вызвать функцию

#При отправке решения на Проверку закомментируйте эту строку обратно - система автоматически подставит разные значения аргументов и вызовет функцию для проверки

# person = Person("", "John", "Doe", 30)
# print(person) 


person = Person("Alice", "Smith", "Johnson", 25)
print(person.get_age())

Ожидаемый ответ:

25

Ошибка:

Traceback (most recent call last):
  File "7CB05NKV7NYAB50BKNSD.py", line 64, in <module>
    print(person.get_age())
AttributeError: 'Person' object has no attribute 'get_age'



