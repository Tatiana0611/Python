Тест 1
Тест пройден успешно ✓

Формулировка:

* Итоговый код для проверки. Иногда добавляем что-то от себя :)


import warnings

warnings.filterwarnings('ignore')

from typing import Union

class InvalidTextError(Exception):
    pass

class InvalidNumberError(Exception):
    pass

class Archive:
    """
    Класс, представляющий архив текстовых и числовых записей.

    Атрибуты:
    - archive_text (list): список архивированных текстовых записей.
    - archive_number (list): список архивированных числовых записей.
    - text (str): текущая текстовая запись для добавления в архив.
    - number (int или float): текущая числовая запись для добавления в архив.
    """

    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.archive_text = []
            cls._instance.archive_number = []
        else:
            cls._instance.archive_text.append(cls._instance.text)
            cls._instance.archive_number.append(cls._instance.number)
        return cls._instance

    def __init__(self, text: str, number: Union[int, float]):
#         self.text = text
#         self.number = number
        if not isinstance(text, str) or text == "":
            raise InvalidTextError("Текст должен быть непустой строкой.")
        if not (isinstance(number, int) and number > 0) and not (isinstance(number, float) and number > 0):
            raise InvalidNumberError("Число должно быть положительным целым или числом с плавающей запятой.")
        self.text = text
        self.number = number

    def __str__(self):
        return f'Text is {self.text} and number is {self.number}. Also {self.archive_text} and {self.archive_number}'

    def __repr__(self):
        return f'Archive("{self.text}", {self.number})'

# Введите ваше решение ниже 


archive_instance = Archive("Sample text", 42.5)
print(archive_instance)
Тест 2
Тест не пройден ✗

Формулировка:

* Итоговый код для проверки. Иногда добавляем что-то от себя :)


import warnings

warnings.filterwarnings('ignore')

from typing import Union

class InvalidTextError(Exception):
    pass

class InvalidNumberError(Exception):
    pass

class Archive:
    """
    Класс, представляющий архив текстовых и числовых записей.

    Атрибуты:
    - archive_text (list): список архивированных текстовых записей.
    - archive_number (list): список архивированных числовых записей.
    - text (str): текущая текстовая запись для добавления в архив.
    - number (int или float): текущая числовая запись для добавления в архив.
    """

    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.archive_text = []
            cls._instance.archive_number = []
        else:
            cls._instance.archive_text.append(cls._instance.text)
            cls._instance.archive_number.append(cls._instance.number)
        return cls._instance

    def __init__(self, text: str, number: Union[int, float]):
#         self.text = text
#         self.number = number
        if not isinstance(text, str) or text == "":
            raise InvalidTextError("Текст должен быть непустой строкой.")
        if not (isinstance(number, int) and number > 0) and not (isinstance(number, float) and number > 0):
            raise InvalidNumberError("Число должно быть положительным целым или числом с плавающей запятой.")
        self.text = text
        self.number = number

    def __str__(self):
        return f'Text is {self.text} and number is {self.number}. Also {self.archive_text} and {self.archive_number}'

    def __repr__(self):
        return f'Archive("{self.text}", {self.number})'

# Введите ваше решение ниже 


invalid_archive_instance = Archive("", -5)
print(invalid_archive_instance)


Ожидаемый ответ:

__main__.InvalidTextError: Invalid text: . Text should be a non-empty string.

Ваш ответ:

__main__.InvalidTextError: Текст должен быть непустой строкой.
Тест 3
Тест не пройден ✗

Формулировка:

* Итоговый код для проверки. Иногда добавляем что-то от себя :)


import warnings

warnings.filterwarnings('ignore')

from typing import Union

class InvalidTextError(Exception):
    pass

class InvalidNumberError(Exception):
    pass

class Archive:
    """
    Класс, представляющий архив текстовых и числовых записей.

    Атрибуты:
    - archive_text (list): список архивированных текстовых записей.
    - archive_number (list): список архивированных числовых записей.
    - text (str): текущая текстовая запись для добавления в архив.
    - number (int или float): текущая числовая запись для добавления в архив.
    """

    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.archive_text = []
            cls._instance.archive_number = []
        else:
            cls._instance.archive_text.append(cls._instance.text)
            cls._instance.archive_number.append(cls._instance.number)
        return cls._instance

    def __init__(self, text: str, number: Union[int, float]):
#         self.text = text
#         self.number = number
        if not isinstance(text, str) or text == "":
            raise InvalidTextError("Текст должен быть непустой строкой.")
        if not (isinstance(number, int) and number > 0) and not (isinstance(number, float) and number > 0):
            raise InvalidNumberError("Число должно быть положительным целым или числом с плавающей запятой.")
        self.text = text
        self.number = number

    def __str__(self):
        return f'Text is {self.text} and number is {self.number}. Also {self.archive_text} and {self.archive_number}'

    def __repr__(self):
        return f'Archive("{self.text}", {self.number})'

# Введите ваше решение ниже 


invalid_archive_instance = Archive("Sample text", -5)
print(invalid_archive_instance)


Ожидаемый ответ:

__main__.InvalidNumberError: Invalid number: -5. Number should be a positive integer or float.

Ваш ответ:

__main__.InvalidNumberError: Число должно быть положительным целым или числом с плавающей запятой.
 